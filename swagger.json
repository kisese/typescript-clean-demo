{
  "openapi": "3.0.0",
  "info": {
    "title": "Express API for Vending Machine",
    "version": "1.0.1",
    "description": "This is a REST API application made with Express."
  },
  "tags": [
    {
      "name": "Purchases",
      "description": "Endpoints for making purchases"
    },
    {
      "name": "Products",
      "description": "Endpoints related to product management"
    },
    {
      "name": "Product Maintenance",
      "description": "Endpoints for supporting product maintenance and operations for admin users"
    },
    {
      "name": "Coins",
      "description": "Endpoints for managing coins"
    },
    {
      "name": "Coin Maintenance",
      "description": "Endpoints for supporting coin maintenance and operations for admin users"
    }
  ],
  "servers": [
    {
      "url": "https://pariti.apps.kisese.com/",
      "description": "Pariti Vending Machine server"
    }
  ],
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "id",
          "name",
          "quantity",
          "type",
          "price"
        ]
      },
      "CoinInfo": {
        "type": "object",
        "properties": {
          "denomination": {
            "type": "number"
          },
          "value": {
            "type": "number"
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "denomination",
          "value",
          "count"
        ]
      },
      "Coin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "denomination": {
            "type": "number"
          },
          "value": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "denomination",
          "value",
          "quantity"
        ]
      },
      "PurchaseDTO": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer"
          },
          "quantity": {
            "type": "integer"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoinInfo"
            }
          }
        },
        "required": [
          "productId",
          "quantity",
          "coins"
        ]
      },
      "ChangeDenomination": {
        "type": "object",
        "properties": {
          "denomination": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "denomination",
          "count"
        ]
      },
      "ChangeDetails": {
        "type": "object",
        "properties": {
          "changePossible": {
            "type": "boolean"
          },
          "changeAmount": {
            "type": "number"
          },
          "changeDenominations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeDenomination"
            }
          }
        },
        "required": [
          "changePossible",
          "changeAmount",
          "changeDenominations"
        ]
      },
      "Purchase": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer"
          },
          "productName": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "insertedAmount": {
            "type": "number"
          },
          "changeDetails": {
            "$ref": "#/components/schemas/ChangeDetails"
          }
        },
        "required": [
          "productId",
          "productName",
          "quantity",
          "insertedAmount",
          "changeDetails"
        ]
      }
    }
  },
  "paths": {
    "/api/v1/product/": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a list of products",
        "description": "Retrieve a list of products from the vending machine.",
        "responses": {
          "200": {
            "description": "A list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Maintenance"
        ],
        "summary": "Create a new product",
        "description": "Add a new product to the inventory.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Sugar"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "type": {
                    "type": "string",
                    "example": "White"
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 200
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          }
        }
      }
    },
    "/api/v1/product/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a specific product",
        "description": "Retrieve details of a specific product by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The product ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found."
          }
        }
      },
      "put": {
        "tags": [
          "Product Maintenance"
        ],
        "summary": "Update a product",
        "description": "Update the details of an existing product by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 4
            },
            "description": "The product ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Sugar"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "type": {
                    "type": "string",
                    "example": "White"
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 200
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "404": {
            "description": "Product not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Product Maintenance"
        ],
        "summary": "Delete a product",
        "description": "Delete a specific product by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "The product ID to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully."
          },
          "404": {
            "description": "Product not found."
          }
        }
      }
    },
    "/api/v1/coin/": {
      "get": {
        "tags": [
          "Coins"
        ],
        "summary": "Retrieve a list of coins",
        "description": "Retrieve details of all available coins.",
        "responses": {
          "200": {
            "description": "A list of coins.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Coin Maintenance"
        ],
        "summary": "Create a new coin",
        "description": "Add a new coin to the system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "denomination": {
                    "type": "string",
                    "example": "Ninety"
                  },
                  "value": {
                    "type": "number",
                    "example": 90
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Coin created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          }
        }
      }
    },
    "/api/v1/coin/{id}": {
      "get": {
        "tags": [
          "Coins"
        ],
        "summary": "Retrieve a specific coin",
        "description": "Retrieve details of a specific coin by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The coin ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the coin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coin"
                }
              }
            }
          },
          "404": {
            "description": "Coin not found."
          }
        }
      },
      "put": {
        "tags": [
          "Coin Maintenance"
        ],
        "summary": "Update a coin",
        "description": "Update the details of an existing coin by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 7
            },
            "description": "The coin ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "denomination": {
                    "type": "string",
                    "example": "Ninety"
                  },
                  "value": {
                    "type": "number",
                    "example": 90
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Coin updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "404": {
            "description": "Coin not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Coin Maintenance"
        ],
        "summary": "Delete a coin",
        "description": "Delete a specific coin by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 7
            },
            "description": "The coin ID to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Coin deleted successfully."
          },
          "404": {
            "description": "Coin not found."
          }
        }
      }
    },
    "/api/v1/purchase/": {
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "Make a purchase",
        "description": "Make a purchase with a given product ID and quantity, providing coins for payment.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseDTO"
              },
              "examples": {
                "default": {
                  "value": {
                    "productId": 1,
                    "quantity": 2,
                    "coins": [
                      {
                        "denomination": "ONE",
                        "value": 1,
                        "count": 20
                      },
                      {
                        "denomination": "FIVE",
                        "value": 5,
                        "count": 2
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase successful."
          },
          "400": {
            "description": "Invalid input."
          }
        }
      },
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Retrieve a list of purchases",
        "description": "Retrieve details of all purchases made.",
        "responses": {
          "200": {
            "description": "A list of purchases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Purchase"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  }
}